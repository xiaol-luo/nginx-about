// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _LIBGNOMEMM_MODULEINFO_H
#define _LIBGNOMEMM_MODULEINFO_H


#include <glibmm.h>

/* $Id: moduleinfo.hg,v 1.5 2002/04/01 16:54:24 murrayc Exp $ */

/* moduleinfo.h
 *
 * Copyright 2001      Free Software Foundation
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/containers.h>
#include <libgnome/gnome-program.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C" { typedef struct _GnomeModuleInfo GnomeModuleInfo; }
#endif

namespace Gnome
{

#ifndef DOXYGEN_SHOULD_SKIP_THIS
//The C copy and free functions are hidden, but they are registered:
GnomeModuleInfo* gnomemm_module_info_copy(const GnomeModuleInfo* src);
void gnomemm_module_info_free(GnomeModuleInfo* src);
#endif //DOXYGEN_SHOULD_SKIP_THIS

class ModuleInfo
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef ModuleInfo CppObjectType;
  typedef GnomeModuleInfo BaseObjectType;

  static GType get_type() G_GNUC_CONST;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


  explicit ModuleInfo(GnomeModuleInfo* gobject, bool make_a_copy = true);

  ModuleInfo(const ModuleInfo& other);
  ModuleInfo& operator=(const ModuleInfo& other);

  ~ModuleInfo();

  void swap(ModuleInfo& other);

  ///Provides access to the underlying C instance.
  GnomeModuleInfo*       gobj()       { return gobject_; }

  ///Provides access to the underlying C instance.
  const GnomeModuleInfo* gobj() const { return gobject_; }

  ///Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs.
  GnomeModuleInfo* gobj_copy() const;

protected:
  GnomeModuleInfo* gobject_;

private:

public:

  
  ModuleInfo();

  ///The strings must be statically allocated - i.e. string literals.
  ModuleInfo(const gchar* name, const gchar* version, const gchar* description);


   Glib::ustring get_name() const;
    Glib::ustring get_version() const;
    Glib::ustring get_description() const;
 
  //requirements array must be statically allocated.
  //last element has NULL version
  void set_requirements(GnomeModuleRequirement* requirements);

  void set_post_args_parse(GnomeModuleHook function);

//
//   GnomeModuleHook instance_init;
//   GnomeModuleHook pre_args_parse, post_args_parse;
//
//   struct poptOption *options;
//
//   GnomeModuleInitHook init_pass;
//
//   GnomeModuleClassInitHook class_init;


};

} //namespace Gnome


namespace Gnome
{

/** @relates Gnome::ModuleInfo
 * @param lhs The left-hand side
 * @param rhs The right-hand side
 */
inline void swap(ModuleInfo& lhs, ModuleInfo& rhs)
  { lhs.swap(rhs); }

} // namespace Gnome

namespace Glib
{

/** A Glib::wrap() method for this object.
 * 
 * @param object The C instance.
 * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
 * @result A C++ instance that wraps this C instance.
 *
 * @relates Gnome::ModuleInfo
 */
Gnome::ModuleInfo wrap(GnomeModuleInfo* object, bool take_copy = false);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
template <>
class Value<Gnome::ModuleInfo> : public Glib::Value_Boxed<Gnome::ModuleInfo>
{};
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

} // namespace Glib


#endif /* _LIBGNOMEMM_MODULEINFO_H */

